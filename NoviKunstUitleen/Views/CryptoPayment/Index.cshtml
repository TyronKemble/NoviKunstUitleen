@model NoviKunstUitleen.ViewModel.CryptoViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

@section Scripts {
<script type="text/javascript">
    $(document).ready(function () {

    $("#alerts").hide();
        $(".checkoutAlert").click(function () {
            $("#alerts").show();
        })

        $(".btnFetch").click(function() {
            // disable button
            $(this).prop("disabled", true);
            // add spinner to button
            $(this).html(
            `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...`
            );
         });

        $(".depositCrypto").click(function () {
            userName = $(this).val();
            $.get("/CryptoPayment/Deposit", { "userName": userName},
                function (data) {
                    if (data == "False") {
                        document.getElementById("ErrorMessageApi").innerHTML = "Unable to Deposit please try again later";
                    } else {
                        window.location.reload();
                    }
                  
                }
            ); 
        })

        $(".withDrawCrypto").click(function () {
            userName = $(this).val();
            withDraw = $("#WithDrawAmount").val();

            $.get("/CryptoPayment/WithDraw", { "withDraw": withDraw },
                function () {
                    window.location.reload();
                }

            ); 
        })

    })

    var request = new XMLHttpRequest()
    function EthToEuroConverter(valNum) {
        request.open('GET', 'https://api.coingecko.com/api/v3/coins/ethereum/tickers', true)
        request.onload = function () {
        // Begin accessing JSON data here
        var data = JSON.parse(this.response)
        if (request.status >= 200 && request.status < 400) {
            var value = [];
                data.tickers.forEach(eth => {
                if (eth.target == "EUR") {
                    value.push(eth.last)
                    }
                })
                    } else {
                        document.getElementById("outputETH").innerHTML = "Unable to retrieve ETH to Euro information ";
                    }
        var num = valNum*value[0]; 
        document.getElementById("outputETH").innerHTML=num.toFixed(2);
        }
        // Send request
        request.send()
    }
</script>
}
<div class="container">
    <h2>Hello @Model.UserName</h2>
    <h3>Current Value: @Model.CryptoWalletValue </h3>
    <h5>Choose one of the options</h5>
    <br />
    <div class="row">
        <div class="col">
            <h3>Converter ETH to Euro</h3>
            <label>Eth</label>
            <input  type="number" placeholder="Eth Value" oninput="EthToEuroConverter(this.value)" onchange="EthToEuroConverter(this.value)">
            <p>Eur: <span id="outputETH"></span></p>
        </div>
        <div class="col">
            <h3>Deposit</h3>
            <p>1 Eth per deposit</p>
            <button class="depositCrypto btn btn-success checkoutAlert btnFetch" href="" value="@User.Identity.Name" >Deposit </button>
            <p id="ErrorMessageApi"></p>
        </div>
        <div class="col">
            <h3>WithDraw</h3>
            <p>Please enter the eth amount</p>
            <input placeholder="Example 0.11" id="WithDrawAmount" value="" />
            <br />
            <br />
            <button class="withDrawCrypto btn btn-success checkoutAlert btnFetch" href="" value="@User.Identity.Name">WithDraw </button>
        </div>
    </div>
</div>



